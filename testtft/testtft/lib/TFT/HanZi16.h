#ifndef __HANZI16_H__
#define __HANZI16_H__
#include <pgmspace.h>
#include <Arduino.h>
#include <TFT_eSPI.h>
PROGMEM const unsigned char hz16_20[] =
    {
        0x04, 0x40, 0x0E, 0x50, 0x78, 0x48, 0x08, 0x48, 0x08, 0x40, 0xFF, 0xFE, 0x08, 0x40, 0x08, 0x44,
        0x0A, 0x44, 0x0C, 0x48, 0x18, 0x30, 0x68, 0x22, 0x08, 0x52, 0x08, 0x8A, 0x2B, 0x06, 0x10, 0x02};
PROGMEM const unsigned char hz16_21[] =
    {
        0x00, 0x08, 0x01, 0xFC, 0x7E, 0x10, 0x22, 0x10, 0x11, 0x20, 0x7F, 0xFE, 0x42, 0x02, 0x82, 0x04,
        0x7F, 0xF8, 0x04, 0x00, 0x07, 0xF0, 0x0A, 0x10, 0x11, 0x20, 0x20, 0xC0, 0x43, 0x30, 0x1C, 0x0E};
PROGMEM const unsigned char hz16_22[] =
    {
        0x08, 0x80, 0x08, 0x80, 0x08, 0x80, 0x11, 0xFE, 0x11, 0x02, 0x32, 0x04, 0x34, 0x20, 0x50, 0x20,
        0x91, 0x28, 0x11, 0x24, 0x12, 0x24, 0x12, 0x22, 0x14, 0x22, 0x10, 0x20, 0x10, 0xA0, 0x10, 0x40};
PROGMEM const unsigned char hz16_23[] =
    {
        0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x3F, 0xF8, 0x21, 0x08, 0x21, 0x08, 0x21, 0x08,
        0x21, 0x08, 0x21, 0x08, 0x3F, 0xF8, 0x21, 0x08, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00};
PROGMEM const unsigned char hz16_24[] =
    {
        0x00, 0x00, 0x7F, 0xFC, 0x40, 0x04, 0x40, 0x04, 0x5F, 0xF4, 0x41, 0x04, 0x41, 0x04, 0x4F, 0xE4,
        0x41, 0x04, 0x41, 0x44, 0x41, 0x24, 0x5F, 0xF4, 0x40, 0x04, 0x40, 0x04, 0x7F, 0xFC, 0x40, 0x04};
PROGMEM const unsigned char hz16_25[] =
    {
        0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x11, 0x10, 0x11, 0x08, 0x11, 0x04,
        0x21, 0x04, 0x21, 0x02, 0x41, 0x02, 0x81, 0x02, 0x01, 0x00, 0x01, 0x00, 0x05, 0x00, 0x02, 0x00};
PROGMEM const unsigned char hz16_26[] =
    {
        0x00, 0x3C, 0x27, 0xC0, 0x12, 0x44, 0x11, 0x28, 0x80, 0x80, 0x41, 0x10, 0x43, 0xE0, 0x10, 0x40,
        0x11, 0x88, 0x23, 0xFC, 0xE0, 0x44, 0x20, 0x40, 0x27, 0xFC, 0x20, 0xA0, 0x21, 0x10, 0x06, 0x0E};
PROGMEM const unsigned char hz16_27[] =
    {
        0x1F, 0xF0, 0x10, 0x10, 0x10, 0x10, 0x1F, 0xF0, 0x10, 0x10, 0x10, 0x10, 0x1F, 0xF0, 0x00, 0x00,
        0xFF, 0xFE, 0x01, 0x00, 0x11, 0x00, 0x11, 0xF8, 0x11, 0x00, 0x29, 0x00, 0x45, 0x00, 0x83, 0xFE};
PROGMEM const unsigned char hz16_28[] =
    {
        0x10, 0x40, 0x10, 0x40, 0x3F, 0x7E, 0x48, 0x90, 0x85, 0x08, 0x01, 0x00, 0x7F, 0xFC, 0x03, 0x80,
        0x05, 0x40, 0x09, 0x20, 0x11, 0x10, 0x2F, 0xE8, 0xC1, 0x06, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00};
PROGMEM const unsigned char hz16_29[] =
    {
        0x7F, 0xFC, 0x01, 0x04, 0x11, 0x00, 0x11, 0xF8, 0x11, 0x00, 0x29, 0x00, 0x47, 0xFE, 0x81, 0x00,
        0x1F, 0xF0, 0x11, 0x10, 0x11, 0x10, 0x1F, 0xF0, 0x11, 0x00, 0x01, 0x08, 0x7F, 0xFC, 0x20, 0x04

};

struct FNT_HZ16 // 汉字字模数据结构
{
  char Index[4];                // 汉字内码索引,存放内码,如"中",在UTF-8编码下，每个汉字占3个字节，第四个是结束符0
  const unsigned char *hz16_Id; // 点阵码数据       存放内码后对应的 点阵序列  每个字需要32个字节的点阵序列
  unsigned char hz_width;
};

PROGMEM const FNT_HZ16 hanzi16[] =
    {
        {"我", hz16_20, 16}, {"爱", hz16_21, 16}, {"你", hz16_22, 16}, {"中", hz16_23, 16}, {"国", hz16_24, 16},
        {"小", hz16_25, 16}, {"溪", hz16_26, 16}, {"是", hz16_27, 16}, {"笨", hz16_28, 16}, {"蛋", hz16_29, 16}
    };
void drawHanzi(const char c[3], uint32_t color, TFT_eSPI tft);
void drawHanzi_Y(int32_t x, int32_t y, const char str[], uint32_t color, TFT_eSPI tft);
void drawHanzi_X(int32_t x, int32_t y, const char str[], uint32_t color, TFT_eSPI tft);
#endif